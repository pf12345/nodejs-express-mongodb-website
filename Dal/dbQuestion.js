// Generated by CoffeeScript 1.8.0
(function() {
  var ObjectId, dbHelper, mongodb, mongojs;

  dbHelper = require('../helper/dbHelper');

  mongodb = dbHelper.newDb();

  mongojs = require('mongojs');

  ObjectId = mongojs.ObjectId;


  /*
      添加问题
      info:
          title
          content
          viewNum
          resNum
          addTime
          updateTime
          user
   */

  exports.add = function(info, cb) {
    return dbHelper.connectDB("questions", cb, function(collection) {
      return collection.insert(info, {
        safe: true
      }, function(err, question) {
        mongodb.close();
        if (err) {
          return cb(err);
        } else {
          return cb(null, question);
        }
      });
    });
  };


  /*
      查找单个问题
      id
   */

  exports.single = function(id, cb) {
    return dbHelper.connectDB("questions", cb, function(collection) {
      return collection.findOne({
        _id: ObjectId(id)
      }, function(err, question) {
        mongodb.close();
        if (err) {
          return cb(new Error(err));
        } else {
          return cb(null, question);
        }
      });
    });
  };


  /*
      获取所有问题
   */

  exports.all = function(cb) {
    return dbHelper.connectDB("questions", cb, function(collection) {
      return collection.find().sort({
        addTime: -1
      }).limit(10).toArray(function(err, items) {
        mongodb.close();
        if (err) {
          return cb(new Error(err));
        } else {
          return cb(null, items);
        }
      });
    });
  };


  /*
      获取某用户提出问题
   */

  exports.getQuestionByUser = function(userId, cb) {
    return dbHelper.connectDB("questions", cb, function(collection) {
      return collection.find({
        "user.id": userId
      }).toArray(function(err, items) {
        mongodb.close();
        if (err) {
          return cb(new Error(err));
        } else {
          return cb(null, items);
        }
      });
    });
  };


  /*
      获取最新问题
      param {Number} num 查找个数
   */

  exports.getLastQuestion = function(num, cb) {
    return dbHelper.connectDB("questions", cb, function(collection) {
      return collection.find().sort({
        addTime: -1
      }).limit(num).toArray(function(err, items) {
        mongodb.close();
        if (err) {
          return cb(new Error(err));
        } else {
          return cb(null, items);
        }
      });
    });
  };


  /*
      获取最新回答问题
      param {Number} num
   */

  exports.getLastAnsQuestion = function(num, cb) {
    return dbHelper.connectDB("questions", cb, function(collection) {
      return collection.find().sort({
        updateTime: -1
      }).limit(num).toArray(function(err, items) {
        mongodb.close();
        if (err) {
          return cb(new Error(err));
        } else {
          return cb(null, items);
        }
      });
    });
  };


  /*
      修改更新时间
   */

  exports.changeUpdateTime = function(qId, cb) {
    var now;
    now = new Date();
    return dbHelper.connectDB("questions", null, function(collection) {
      return collection.update({
        _id: ObjectId(qId)
      }, {
        $set: {
          updateTime: now
        }
      }, function(err) {
        if (err) {
          return cb(new Error(err));
        } else {
          return cb(null, 'ok');
        }
      });
    });
  };


  /*
      修改阅读数量
   */

  exports.changeViewNum = function(qId, cb) {
    return dbHelper.connectDB("questions", cb, function(collection) {
      return collection.findOne({
        _id: ObjectId(qId)
      }, function(err, question) {
        var viewNum;
        if (err) {
          return cb(new Error(err));
        } else {
          viewNum = question.viewNum;
          viewNum++;
          return collection.update({
            _id: ObjectId(qId)
          }, {
            $set: {
              viewNum: viewNum
            }
          }, function(err) {
            mongodb.close();
            if (err) {
              return cb(new Error(err));
            } else {
              return cb(null, 'ok');
            }
          });
        }
      });
    });
  };


  /*
      修改回复数量
   */

  exports.changeResNum = function(qId, cb) {
    return dbHelper.connectDB("questions", cb, function(collection) {
      return collection.findOne({
        _id: ObjectId(qId)
      }, function(err, question) {
        var resNum;
        if (err) {
          return cb(new Error(err));
        } else {
          resNum = question.resNum;
          resNum++;
          return collection.update({
            _id: ObjectId(qId)
          }, {
            $set: {
              resNum: resNum
            }
          }, function(err) {
            mongodb.close();
            if (err) {
              return cb(new Error(err));
            } else {
              return cb(null, 'ok');
            }
          });
        }
      });
    });
  };

}).call(this);

//# sourceMappingURL=dbQuestion.js.map
