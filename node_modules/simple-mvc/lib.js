// Generated by CoffeeScript 1.7.1

/*
Created by massimo on 2014/4/12.
express-mvc framework
 */

(function() {
  var PROJECT_DIR, configRoute, cons, express, fs, path, resolveMethod, setOptions, validHttpMethod;

  fs = require("fs");

  express = require("express");

  path = require("path");

  cons = require("consolidate");

  PROJECT_DIR = path.join(__dirname, "../../");


  /*
  配置路由
  @param options
  @param {String} [options.controllerPath="controller"] controller path
  @pram {String} [options.viewPath="views"] views path
  @param parentApp app
   */

  module.exports = function(options, parentApp) {
    var defaultFilterPath;
    if (!parentApp) {
      parentApp = options;
      options = {};
    }
    setOptions(options, {
      controllerPath: "controllers",
      viewPath: "views",
      defaultEngine: "swig",
      defaultViewEngine: "html"
    });
    if (!options.filter) {
      defaultFilterPath = path.join(PROJECT_DIR, "filter.js");
      if (fs.existsSync(defaultFilterPath)) {
        options.filter = require(defaultFilterPath);
      } else {
        options.filter = {};
      }
    }
    return fs.readdirSync(path.join(PROJECT_DIR, options.controllerPath)).forEach(function(fileName) {
      var $mvcConfig, app, controller, controllerName, engine, func, itemMethod, itemMiddleware, method, methodInfo, methodName, pathOverrideByConfig, viewEngine, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3, _ref4;
      if (fileName.slice(-3) === ".js") {
        controllerName = fileName.slice(0, -3);
        controller = require(path.join(PROJECT_DIR, options.controllerPath, controllerName));
        app = express();
        $mvcConfig = controller.$mvcConfig;
        if (options.viewPath) {
          engine = options.defaultEngine;
          if (typeof $mvcConfig !== "undefined" && $mvcConfig.engine) {
            engine = $mvcConfig.engine;
          }
          viewEngine = (typeof $mvcConfig !== "undefined" && $mvcConfig.viewEngine ? $mvcConfig.viewEngine : void 0) || options.defaultViewEngine;
          app.engine("html", cons[engine]);
          app.set("view engine", viewEngine);
          app.set("views", path.join(PROJECT_DIR, options.viewPath, controllerName));
        }
        for (methodName in controller) {
          method = controller[methodName];
          if (methodName[0] === "$") {
            continue;
          }
          methodInfo = resolveMethod(methodName);
          setOptions(methodInfo, $mvcConfig != null ? (_ref = $mvcConfig.route) != null ? _ref[methodInfo.action] : void 0 : void 0, true);
          if ($mvcConfig != null ? (_ref1 = $mvcConfig.route) != null ? (_ref2 = _ref1[methodInfo.action]) != null ? _ref2.path : void 0 : void 0 : void 0) {
            pathOverrideByConfig = true;
          }
          if (!methodInfo.path) {
            methodInfo.path = "/" + controllerName + "/" + methodInfo.action;
          }
          if (methodInfo.middleware) {
            _ref3 = methodInfo.middleware;
            for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
              itemMiddleware = _ref3[_i];
              func = controller[itemMiddleware] || options.filter[itemMiddleware];
              if (typeof func === "function") {
                if (controllerName === "home") {
                  configRoute(app, "all", "/", func);
                }
                if (methodInfo.action === "index") {
                  configRoute(app, "all", "/" + controllerName, func);
                }
                configRoute(app, "all", methodInfo.path, func);
              } else {
                throw new Error("can not find filter", itemMiddleware);
              }
            }
          }
          _ref4 = methodInfo.httpVerbs;
          for (_j = 0, _len1 = _ref4.length; _j < _len1; _j++) {
            itemMethod = _ref4[_j];
            if (!pathOverrideByConfig) {
              if (controllerName === "home") {
                configRoute(app, itemMethod, "/", method);
              }
              if (methodInfo.action === "index") {
                configRoute(app, itemMethod, "/" + controllerName, method);
              }
            }
            configRoute(app, itemMethod, methodInfo.path, method);
          }
        }
        return parentApp.use(app);
      }
    });
  };


  /*
  配置路由
  @param app application
  @param {String} method http request method
  @param {String} path route path
  @param {Function} func function
   */

  configRoute = function(app, method, path, func) {
    return app[method](path, func);
  };


  /*
  通过解析方法名获取方法支持的HTTP方法和中间件信息
  @param {String} methodName method name
   */

  resolveMethod = function(methodName) {
    var arr, httpVerbs, middleware;
    arr = methodName.split("_");
    httpVerbs = [];
    middleware = [];
    arr.slice(1).forEach(function(item) {
      if (item[0] === "$") {
        return middleware.push(item);
      } else {
        if (validHttpMethod(item)) {
          return httpVerbs.push(item.toLowerCase());
        } else {
          throw new Error("not support method:" + item);
        }
      }
    });
    if (httpVerbs.length <= 0) {
      httpVerbs.push("get");
    }
    return {
      action: arr[0],
      httpVerbs: httpVerbs,
      middleware: middleware
    };
  };


  /*
      detect if a method is a valid http method
   */

  validHttpMethod = function(method) {
    var _ref;
    return (_ref = method.toLowerCase()) === "get" || _ref === "post" || _ref === "options" || _ref === "delete" || _ref === "put" || _ref === "head" || _ref === "trace";
  };


  /*
      set default options
      @param {Boolean} override override options by defaultOptions or not
   */

  setOptions = function(options, defaultOptions, override) {
    var key, value, _results;
    if (!defaultOptions) {
      return;
    }
    if (!options) {
      return options = defaultOptions;
    } else {
      _results = [];
      for (key in defaultOptions) {
        value = defaultOptions[key];
        if (override) {
          if (defaultOptions[key]) {
            _results.push(options[key] = value);
          } else {
            _results.push(void 0);
          }
        } else {
          if (!options[key]) {
            _results.push(options[key] = value);
          } else {
            _results.push(void 0);
          }
        }
      }
      return _results;
    }
  };

}).call(this);

//# sourceMappingURL=lib.map
